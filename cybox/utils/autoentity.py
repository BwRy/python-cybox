from docutils import nodes
from sphinx.ext.autodoc import AttributeDocumenter, ClassDocumenter
from sphinx.util.pycompat import class_types

import cybox



class EntityDocumenter(ClassDocumenter):

    objtype = "class"
    priority = 99

    @classmethod
    def can_document_member(cls, member, membername, isattr, parent):
        return isinstance(member, class_types) and \
               issubclass(member, cybox.Entity)


    # def add_content(self, more_content, no_docstring=False):
    #     ClassDocumenter.add_content(self, more_content, no_docstring)
    #     self.add_line("Generated by GREG", "Greg", 1)


class TypedFieldDocumenter(AttributeDocumenter):

    objtype = "attribute"
    priority = 99

    @classmethod
    def can_document_member(cls, member, membername, isattr, parent):
        return AttributeDocumenter.can_document_member(member, membername,
                isattr, parent) and isinstance(member, cybox.TypedField)


    def add_content(self, more_content, no_docstring=False):
        AttributeDocumenter.add_content(self, more_content, no_docstring)
        type_ = self.object.type_
        if type_:
            typestr = ":py:class:`%s.%s`" % (type_.__module__, type_.__name__)
            self.add_line("|  Type: %s\n" % typestr, "<autoentity>")
        self.add_line("|  XML Binding class name: ``%s``\n" % self.object.name, "<autoentity>")
        self.add_line("|  Dictionary key name: ``%s``\n" % self.object.key_name, "<autoentity>")


def setup(app):
    app.add_autodocumenter(EntityDocumenter)
    app.add_autodocumenter(TypedFieldDocumenter)
